(in-package #:org.shirakumo.framebuffers.win32)

(defvar *displays* ())

(pushnew :win32 fb-int:*available-backends*)

(defmacro with-rect ((rect x y w h) &body body)
  `(cffi:with-foreign-objects ((,rect '(:struct win32:rect)))
     (setf (win32:rect-left ,rect) ,x)
     (setf (win32:rect-top ,rect) ,y)
     (setf (win32:rect-right ,rect) (+ (win32:rect-left ,rect) ,w))
     (setf (win32:rect-bottom ,rect) (+ (win32:rect-top ,rect) ,h))
     ,@body))

(defun rect-width (rect)
  (- (win32:rect-right rect) (win32:rect-left rect)))

(defun rect-height (rect)
  (- (win32:rect-bottom rect) (win32:rect-top rect)))

(define-condition win32-error (fb:framebuffer-error com:win32-error)
  ())

(defun win32-error (&key function-name message)
  (com:win32-error T :function-name function-name :message message :type 'win32-error))

(defmacro check-result (form &optional (function-name (car form)))
  `(unless ,form
     (win32-error :function-name ',function-name)))

(defmethod fb-int:init-backend ((backend (eql :win32)))
  (unless (cffi:foreign-library-loaded-p 'win32:user32)
    (cffi:load-foreign-library 'win32:user32)
    (cffi:load-foreign-library 'win32:gdi32)
    (ignore-errors (cffi:load-foreign-library 'win32:shcore))
    (init-stringtable)
    (or (ignore-errors (win32:set-process-dpi-awareness-context :per-monitor-aware-2))
        (ignore-errors (win32:set-process-dpi-awareness-context :per-monitor-aware))
        (ignore-errors (com:check-hresult (win32:set-process-dpi-awareness :per-monitor-dpi-aware)))
        (ignore-errors (win32:set-process-dpi-aware)))))

(defmethod fb-int:shutdown-backend ((backend (eql :win32)))
  (setf *displays* NIL))

(defun create-class ()
  (cffi:with-foreign-objects ((class '(:struct win32:window-class)))
    (cffi:foreign-funcall "memset" :pointer class :int 0 :size (cffi:foreign-type-size '(:struct win32:window-class)))
    (cond ((win32:get-class-info (win32:get-module-handle (cffi:null-pointer)) "clframebuffer" class)
           (win32:window-class-class-name class))
          (T
           (setf (win32:window-class-style class) '(:owndc :vredraw :hredraw))
           (setf (win32:window-class-proc class) (cffi:callback handle-event))
           (setf (win32:window-class-cursor class) (win32:load-cursor 0 :arrow))
           (setf (win32:window-class-class-name class) "clframebuffer")
           (let ((cls (win32:register-class class)))
             (if (= 0 cls)
                 (win32-error :function-name 'win32:register-class)
                 (cffi:make-pointer cls)))))))

(defmethod fb-int:open-backend ((backend (eql :win32)) &key (title (fb-int:default-title)) location size (visible-p T) event-handler)
  (let* ((screen-w (win32:get-system-metrics :cxscreen))
         (screen-h (win32:get-system-metrics :cyscreen))
         (w (or (car size) screen-w))
         (h (or (cdr size) screen-h))
         (x (or (car location) (round (- screen-w w) 2)))
         (y (or (cdr location) (round (- screen-h h) 2)))
         (style (list :clipsiblings :clipchildren :sysmenu :minimizebox :caption)))
    (let ((ptr (win32:create-window 0 (create-class) title style x y w h 0 0 0 (cffi:null-pointer))))
      (if (zerop ptr)
          (win32-error :function-name 'win32:create-window)
          (make-instance 'window :ptr ptr
                                 :size (cons w h)
                                 :location (cons x y)
                                 :visible-p visible-p
                                 :event-handler event-handler)))))

(defclass window (fb:window)
  ((ptr :initarg :ptr :accessor ptr)
   (dc :initarg :dc :accessor dc)
   (buffer :reader fb:buffer :initform NIL :accessor buffer)
   (bitmap-info :initform (cffi:foreign-alloc '(:struct win32:bitmap-v5-header)) :accessor bitmap-info)
   (modifiers :initform () :accessor modifiers)
   (surrogate :initform 0 :accessor surrogate)
   (timers :initform () :accessor timers)
   (icon-handle :initform NIL :accessor icon-handle)
   (icon-table :initform (make-hash-table :test 'eq) :accessor icon-table)
   (cursor-handle :initform NIL :accessor cursor-handle)))

(defmethod initialize-instance :after ((window window) &key)
  (let ((ptr (ptr window))
        (bi (bitmap-info window)))
    (setf (fb-int:ptr-window ptr) window)
    (setf (dc window) (win32:get-dc ptr))
    (when (zerop (dc window))
      (win32-error :function-name 'win32:get-dc))
    (fb-int:memset bi 'win32:bitmap-v5-header)
    (setf (win32:bitmap-info-size bi) (cffi:foreign-type-size '(:struct win32:bitmap-v5-header)))
    (setf (win32:bitmap-info-planes bi) 1)
    (setf (win32:bitmap-info-bit-count bi) 32)
    (setf (win32:bitmap-info-compression bi) 3)
    (setf (win32:bitmap-info-alpha-mask bi) #xFF000000)
    (setf (win32:bitmap-info-red-mask bi)   #x00FF0000)
    (setf (win32:bitmap-info-green-mask bi) #x0000FF00)
    (setf (win32:bitmap-info-blue-mask bi)  #x000000FF)
    (update-buffer window (fb:width window) (fb:height window))
    (win32:drag-accept-files ptr T)
    (when (fb:visible-p window)
      (win32:show-window ptr :normal)
      (win32:show-window ptr :normal))
    (or (ignore-errors
         (cffi:with-foreign-objects ((x :uint) (y :uint))
           (win32:get-dpi-for-monitor (win32:monitor-from-window ptr :default-to-nearest) 0 x y)
           (setf (car (fb:content-scale window)) (/ (cffi:mem-ref x :uint) 96))
           (setf (car (fb:content-scale window)) (/ (cffi:mem-ref y :uint) 96))))
        (progn
          (setf (car (fb:content-scale window)) (/ (win32:get-device-caps (dc window) :logpixelsx) 96))
          (setf (car (fb:content-scale window)) (/ (win32:get-device-caps (dc window) :logpixelsy) 96))))))

(defmethod fb:valid-p ((window window))
  (not (null (ptr window))))

(defmethod fb:close ((window window))
  (loop for icon being the hash-values of (icon-table window)
        do (win32:destroy-icon icon))
  (clrhash (icon-table window))
  (loop for timer = (pop (timers window))
        while timer do (fb:cancel-timer window timer))
  (fb-int:clean window icon-handle win32:destroy-icon)
  (fb-int:clean window bitmap-info cffi:foreign-free)
  (when (dc window)
    (win32:release-dc (ptr window) (dc window))
    (setf (dc window) NIL))
  (fb-int:clean window ptr win32:destroy-window))

(defun get-window-style (window)
  (let ((style '(:clipsiblings
                 :clipchildren)))
    (cond ((fb:borderless-p window)
           (push :popup style))
          (T
           (push :sysmenu style)
           (push :minimizebox style)
           (push :caption style)
           (when (fb:resizable-p window)
             (push :maximizebox style)
             (push :thickframe style))))
    style))

(defmethod (setf fb:size) (size (window window))
  (with-rect (rect 0 0 (car size) (cdr size))
    (win32:adjust-window-rect rect (get-window-style window) NIL)
    (let ((w (- (win32:rect-right rect) (win32:rect-left rect)))
          (h (- (win32:rect-bottom rect) (win32:rect-top rect))))
      (check-result (win32:set-window-pos (ptr window) 0 0 0 w h '(:noactivate :nozorder :nomove :noownerzorder)))
      size)))

(defmethod (setf fb:location) (location (window window))
  (with-rect (rect (car location) (cdr location) 0 0)
    (win32:adjust-window-rect rect (get-window-style window) NIL)
    (let ((x (win32:rect-left rect))
          (y (win32:rect-top rect)))
      (check-result (win32:set-window-pos (ptr window) 0 x y 0 0 '(:noactivate :nozorder :nosize))))
    location))

(defmethod (setf fb:title) (title (window window))
  (check-result (win32:set-window-text (ptr window) title))
  (setf (fb-int:title window) title)
  title)

(defmethod (setf fb:visible-p) (state (window window))
  (win32:show-window (ptr window) (if state :show :hide))
  (setf (fb-int:visible-p window) state)
  state)

(defmethod (setf fb:maximized-p) (state (window window))
  (win32:show-window (ptr window) (if state :maximize :restore))
  (setf (fb-int:maximized-p window) state)
  state)

(defmethod (setf fb:iconified-p) (state (window window))
  (win32:show-window (ptr window) (if state :minimize :restore))
  (setf (fb-int:iconified-p window) state)
  state)

(defmethod (setf fb:minimum-size) (value (window window))
  (setf (car (fb-int:minimum-size window)) (or (car value) 1))
  (setf (cdr (fb-int:minimum-size window)) (or (cdr value) 1))
  (cffi:with-foreign-objects ((rect '(:struct win32:rect)))
    (win32:get-window-rect (ptr window) rect)
    (win32:move-window (ptr window) (win32:rect-left rect) (win32:rect-top rect)
                       (- (win32:rect-right rect) (win32:rect-left rect))
                       (- (win32:rect-bottom rect) (win32:rect-top rect)) T))
  value)

(defmethod (setf fb:maximum-size) (value (window window))
  (setf (car (fb-int:maximum-size window)) (car value))
  (setf (cdr (fb-int:maximum-size window)) (cdr value))
  (cffi:with-foreign-objects ((rect '(:struct win32:rect)))
    (win32:get-window-rect (ptr window) rect)
    (win32:move-window (ptr window) (win32:rect-left rect) (win32:rect-top rect)
                       (- (win32:rect-right rect) (win32:rect-left rect))
                       (- (win32:rect-bottom rect) (win32:rect-top rect)) T))
  value)

(defmethod (setf fb:focused-p) (value (window window))
  (when value
    (win32:bring-window-to-top (ptr window))
    (win32:set-foreground-window (ptr window))
    (win32:set-focus (ptr window))
    (setf (fb-int:focused-p window) value))
  value)

(defun update-window-styles (window)
  ;; we want to mask off some named constants that are multiple bits,
  ;; so do that in bits rather than trying to figure out which
  ;; keywords they would expand to
  (let* ((mask (cffi:foreign-bitfield-value 'win32::window-style
                                            '(:popup :overlappedwindow)))
         (style (cffi:foreign-bitfield-symbols 'win32::window-style
                                               (logandc1 mask
                                                         (win32:get-window (ptr window) :STYLE)))))
    (setf style (union style (get-window-style window)))
    (with-rect (rect 0 0 0 0)
      (win32:get-window-rect (ptr window) rect)
      (win32:adjust-window-rect rect style NIL)
      (win32:set-window (ptr window) :STYLE (cffi:foreign-bitfield-value 'win32::window-style style))
      (win32:set-window-pos (ptr window) 0 (win32:rect-left rect) (win32:rect-top rect) (rect-width rect) (rect-height rect)
                            '(:framechanged :noactivate :nozorder)))))

(defmethod (setf fb:borderless-p) (value (window window))
  (setf (fb-int:borderless-p window) value)
  (update-window-styles window)
  value)

(defmethod (setf fb:always-on-top-p) (value (window window))
  ;; Not implemented
  value)

(defmethod (setf fb:resizable-p) (value (window window))
  (setf (fb-int:resizable-p window) value)
  (update-window-styles window)
  value)

(defmethod (setf fb:floating-p) (value (window window))
  (win32:set-window-pos (ptr window) (if value -1 -2) 0 0 0 0 '(:noactivate :nomove :nosize))
  (setf (fb-int:floating-p window) value))

(defun drag-files (ptr)
  (loop for i from 0 below (win32:drag-query-file ptr #xffffffff (cffi:null-pointer) 0)
        for len = (1+ (win32:drag-query-file ptr i (cffi:null-pointer) 0))
        collect (cffi:with-foreign-objects ((buf :uint16 len))
                  (win32:drag-query-file ptr i buf len)
                  (com:wstring->string buf))))

(defmethod fb:clipboard ((window window))
  (loop until (win32:open-clipboard (ptr window))
        do (sleep 0.001))
  (unwind-protect
       (loop for format = (win32:enum-clipboard-formats 0)
             then (win32:enum-clipboard-formats format)
             do (case format
                  (0 (return))
                  (:unicodetext
                   (let* ((obj (win32:get-clipboard-data format))
                          (str (win32:global-lock obj)))
                     (unwind-protect (return (com:wstring->string str))
                       (win32:global-unlock obj))))
                  (:dib
                   (let* ((obj (win32:get-clipboard-data format))
                          (buf (make-array (* 4 (win32:bitmap-info-width obj) (win32:bitmap-info-height obj))
                                           :element-type '(unsigned-byte 8))))
                     (cffi:with-pointer-to-vector-data (ptr buf)
                       (fb-int:memcpy ptr (cffi:inc-pointer obj (cffi:foreign-type-size '(:struct win32:bitmap-v5-header))) (length buf)))
                     (return (fb:make-icon (win32:bitmap-info-width obj) (win32:bitmap-info-height obj) buf))))
                  (:hdrop
                   (let ((obj (win32:get-clipboard-data format)))
                     (return (drag-files obj))))))
    (win32:close-clipboard)))

(defmethod (setf fb:clipboard) ((string string) (window window))
  (let* ((len (com:wstring-length string))
         (obj (win32:global-alloc '(:moveable) (* 2 len)))
         (buf (win32:global-lock obj)))
    (unwind-protect (com:string->wstring string buf)
      (win32:global-unlock obj))
    (loop until (win32:open-clipboard (ptr window))
          do (sleep 0.001))
    (win32:empty-clipboard)
    (win32:set-clipboard-data :unicodetext obj)
    (win32:close-clipboard)))

(defmethod (setf fb:clipboard) ((icon fb:icon) (window window))
  (let* ((len (* 4 (fb:width icon) (fb:height icon)))
         (hdr (cffi:foreign-type-size '(:struct win32:bitmap-v5-header)))
         (obj (win32:global-alloc '(:moveable) (+ hdr len)))
         (bi (win32:global-lock obj)))
    (unwind-protect
         (progn
           (fb-int:memset bi hdr)
           (setf (win32:bitmap-info-size bi) hdr)
           (setf (win32:bitmap-info-width bi) (fb:width icon))
           (setf (win32:bitmap-info-height bi) (fb:height icon))
           (setf (win32:bitmap-info-planes bi) 1)
           (setf (win32:bitmap-info-bit-count bi) 32)
           (setf (win32:bitmap-info-compression bi) 3)
           (setf (win32:bitmap-info-alpha-mask bi) #xFF000000)
           (setf (win32:bitmap-info-red-mask bi)   #x00FF0000)
           (setf (win32:bitmap-info-green-mask bi) #x0000FF00)
           (setf (win32:bitmap-info-blue-mask bi)  #x000000FF)
           (cffi:with-pointer-to-vector-data (ptr (fb:buffer icon))
             (fb-int:memcpy (cffi:inc-pointer bi hdr) ptr len)))
      (win32:global-unlock obj))
    (loop until (win32:open-clipboard (ptr window))
          do (sleep 0.001))
    (win32:empty-clipboard)
    (win32:set-clipboard-data :dib obj)
    (win32:close-clipboard)))

(defun make-icon (window icon &key (x 0) (y 0) (icon-p T))
  (cffi:with-foreign-objects ((bi '(:struct win32:bitmap-v5-header))
                              (ii '(:struct win32:icon-info))
                              (target :pointer))
    (fb-int:memset bi '(:struct win32:bitmap-v5-header))
    (setf (win32:bitmap-info-size bi) (cffi:foreign-type-size '(:struct win32:bitmap-v5-header)))
    (setf (win32:bitmap-info-width bi) (fb:width icon))
    (setf (win32:bitmap-info-height bi) (- (fb:height icon)))
    (setf (win32:bitmap-info-planes bi) 1)
    (setf (win32:bitmap-info-bit-count bi) 32)
    (setf (win32:bitmap-info-compression bi) 3)
    (setf (win32:bitmap-info-alpha-mask bi) #xFF000000)
    (setf (win32:bitmap-info-red-mask bi)   #x00FF0000)
    (setf (win32:bitmap-info-green-mask bi) #x0000FF00)
    (setf (win32:bitmap-info-blue-mask bi)  #x000000FF)
    (let ((color (win32:create-dib-section (dc window) bi 3 target (cffi:null-pointer) 0))
          (mask (win32:create-bitmap (fb:width icon) (fb:height icon) 1 1 (cffi:null-pointer)))
          (target (cffi:mem-ref target :pointer)))
      (cffi:with-pointer-to-vector-data (source (fb:buffer icon))
        (fb-int::memcpy target source (length (fb:buffer icon))))
      (setf (win32:icon-info-icon ii) icon-p)
      (setf (win32:icon-info-xhotspot ii) x)
      (setf (win32:icon-info-yhotspot ii) y)
      (setf (win32:icon-info-mask ii) mask)
      (setf (win32:icon-info-color ii) color)
      (prog1 (win32:create-icon ii)
        (win32:delete-object color)
        (win32:delete-object mask)))))

(defmethod (setf fb:icon) ((value null) (window window))
  (win32:send-message (ptr window) :seticon 0 (win32:get-class (ptr window) -34))
  (win32:send-message (ptr window) :seticon 1 (win32:get-class (ptr window) -14))
  (when (icon-handle window) (win32:destroy-icon (icon-handle window)))
  (setf (icon-handle window) value)
  (setf (fb-int:icon window) value))

(defmethod (setf fb:icon) ((value fb:icon) (window window))
  (let ((icon (make-icon window value)))
    (win32:send-message (ptr window) :seticon 0 icon)
    (win32:send-message (ptr window) :seticon 1 icon)
    (when (icon-handle window) (win32:destroy-icon (icon-handle window)))
    (setf (icon-handle window) icon)
    (setf (fb-int:icon window) value)))

(defmethod (setf cursor-handle) :before (handle (window window))
  (when handle
    (case (fb:cursor-state window)
      ((:normal :captured)
       (win32:set-cursor handle))
      (T
       (win32:set-cursor (cffi:null-pointer))))))

(defmethod (setf fb:cursor-icon) ((value symbol) (window window))
  (let* ((id (ecase value
               (:arrow :normal)
               (:busy :wait)
               (:crosshair :cross)
               (:pointing-hand :hand)
               (:resize-ew :sizewe)
               (:resize-ns :sizens)
               (:resize-nwse :sizenwse)
               (:resize-nesw :sizenesw)
               (:resize-all :sizeall)
               (:not-allowed :no)))
         (handle (win32:load-image (cffi:null-pointer) id :cursor 0 0 '(:defaultsize :shared))))
    (setf (cursor-handle window) handle)
    value))

(defmethod (setf fb:cursor-icon) ((value fb:icon) (window window))
  (let ((handle (or (gethash value (icon-table window))
                    (setf (gethash value (icon-table window)) (make-icon window value :icon-p NIL)))))
    (setf (cursor-handle window) handle)
    value))

(defmethod (setf fb:cursor-state) (value (window window))
  ;; TODO: implement cursor-state
  )

(defmethod fb:set-timer ((window window) delay &key repeat)
  (let ((handle (win32:create-waitable-timer (cffi:null-pointer) NIL (cffi:null-pointer)))
        (period (truncate (* 1000 delay))))
    (cffi:with-foreign-objects ((time :uint64))
      (setf (cffi:mem-ref time :int64) (truncate (* -10000000 delay)))
      (win32:set-waitable-timer handle time (if repeat period 0) (cffi:null-pointer) (cffi:null-pointer) NIL))
    (push handle (timers window))
    handle))

(defmethod fb:cancel-timer ((window window) timer)
  (win32:cancel-waitable-timer timer)
  (win32:close-handle timer)
  (setf (timers window) (remove timer (timers window)))
  NIL)

(defmethod fb:request-attention ((window window))
  (win32:flash-window (ptr window) T))

(defmethod fb:key-scan-code (key (window window))
  (key-code key))

(defmethod fb:local-key-string ((key integer) (window window))
  (key-string key))

(defclass display (fb-int:display)
  ((display-handle :initform NIL :initarg :display-handle :accessor display-handle)))

(defstruct (video-mode (:include fb:video-mode)))

(defun translate-mode (display mode)
  (make-video-mode :display display
                   :width (win32:device-mode-pels-width mode)
                   :height (win32:device-mode-pels-height mode)
                   :refresh-rate (win32:device-mode-display-frequency mode)))

(defun enum-modes (display)
  (cffi:with-foreign-objects ((mode '(:struct win32:device-mode)))
    (delete-duplicates (loop for i from 0
                             while (win32:enum-display-settings (fb:id display) i mode)
                             when (and (< 15 (win32:device-mode-bits-per-pel mode)))
                             collect (translate-mode display mode))
                       :key #'fb:id :test #'string=)))

(defun refresh-display (display)
  (setf (fb-int:video-modes display) (enum-modes display))
  (cffi:with-foreign-objects ((mode '(:struct win32:device-mode)))
    (win32:enum-display-settings (fb:id display) win32:ENUM-CURRENT-SETTINGS mode)
    (setf (car (fb:location display)) (win32:device-mode-position-x mode))
    (setf (cdr (fb:location display)) (win32:device-mode-position-y mode))
    (let ((mode (translate-mode display mode)))
      (setf (fb-int:video-mode display) (or (find (fb:id mode) (fb:video-modes display) :key #'fb:id :test #'string=)
                                            mode))))
  display)

(defun poll-displays (&optional window)
  (cffi:with-foreign-objects ((adapter '(:struct win32:adapter)))
    (setf (win32:adapter-cb adapter)
          (cffi:foreign-type-size '(:struct win32:adapter)))
    (let ((ids ())
          (displays ()))
      ;; First enumerate everything
      (loop for i from 0
            for j = 0
            while (win32:enum-display-devices (cffi:null-pointer) i adapter 0)
            when (find :device-active (win32:adapter-state-flags adapter))
              do (let* ((id (win32:adapter-device-name adapter))
                        (display (find id *displays* :key #'fb:id :test #'string=)))
                   (unless display
                     ;; call again with specific device id to get monitor name
                     (check-result (win32:enum-display-devices id 0 adapter 0))
                     (setf display (make-instance 'display :id id :title (win32:adapter-device-string adapter)))
                     (when window (fb:display-connected window display NIL)))
                   (push (refresh-display display) displays)))
      ;; Disable old displays
      (loop for display in *displays*
            do (unless (find (fb:id display) ids :test #'string=)
                 (when window (fb:display-connected window display T))))
      (setf *displays* displays))))

(defmethod fb-int:list-displays-backend ((backend (eql :win32)))
  (or *displays*
      (poll-displays)))

(defmethod fb:display ((window window))
  (or (fb:fullscreen-p window)
      (call-next-method)))

(defmethod (setf fb:fullscreen-p) ((value null) (window window))
  (typecase (fb:fullscreen-p window)
    (null)
    (display)
    (video-mode
     ;; Restore the original video mode if there was one.
     (win32:change-display-settings (fb:id (fb:display (fb:fullscreen-p window))) (cffi:null-pointer) (cffi:null-pointer) :fullscreen (cffi:null-pointer))
     (refresh-display (fb:fullscreen-p window))))
  (setf (fb-int:fullscreen-p window) value))

(defmethod (setf fb:fullscreen-p) ((value video-mode) (window window))
  (unless (eq value (fb:fullscreen-p window))
    ;; We remember the display if we don't change mode and the video-mode if we need to restore.
    (cond ((eq value (fb:video-mode (fb:display value))) 
           (setf (fb-int:fullscreen-p window) (fb:display value)))
          (T
           (cffi:with-foreign-objects ((mode '(:struct win32:device-mode)))
             (fb-int:memset mode (cffi:foreign-type-size '(:struct win32:device-mode)))
             (setf (win32:device-mode-size mode) (cffi:foreign-type-size '(:struct win32:device-mode)))
             (setf (win32:device-mode-fields mode) '(:pelswidth :pelsheight :displayfrequency))
             (setf (win32:device-mode-pels-width mode) (fb:width value))
             (setf (win32:device-mode-pels-height mode) (fb:height value))
             (setf (win32:device-mode-display-frequency mode) (fb:refresh-rate value))
             (win32:change-display-settings (fb:id (fb:display value)) mode (cffi:null-pointer) :fullscreen (cffi:null-pointer)))
           (setf (fb-int:video-mode (fb:display value)) value)
           (setf (fb-int:fullscreen-p window) value)))
    ;; Now fit the window to the monitor
    (destructuring-bind (x . y) (fb:location (fb:display value))
      (destructuring-bind (w . h) (fb:size (fb:display value))
        (win32:set-window-pos (ptr window) 0 x y w h '(:nozorder :noactivate :nocopybits)))))
  value)

(defun update-buffer (window w h)
  (setf (buffer window) (fb-int:resize-buffer w h (buffer window) (car (fb:size window)) (cdr (fb:size window))))
  (setf (win32:bitmap-info-width (bitmap-info window)) w)
  (setf (win32:bitmap-info-height (bitmap-info window)) h)
  (setf (car (fb:size window)) w)
  (setf (cdr (fb:size window)) h))

(defun update-modifiers (window)
  (setf (modifiers window) ())
  (when (< 0 (logand #x8000 (win32:get-key-state :shift)))
    (push :shift (modifiers window)))
  (when (< 0 (logand #x8000 (win32:get-key-state :control)))
    (push :control (modifiers window)))
  (when (< 0 (logand #x8000 (win32:get-key-state :menu)))
    (push :alt (modifiers window)))
  (when (or (< 0 (logand #x8000 (win32:get-key-state :lwin)))
            (< 0 (logand #x8000 (win32:get-key-state :rwin))))
    (push :super (modifiers window)))
  (when (< 0 (logand #x1 (win32:get-key-state :capital)))
    (push :caps-lock (modifiers window)))
  (when (< 0 (logand #x1 (win32:get-key-state :numlock)))
    (push :num-lock (modifiers window)))
  (modifiers window))

(defun enc32 (x y)
  (let ((xy 0))
    (setf (ldb (byte 16  0) xy) x)
    (setf (ldb (byte 16 16) xy) y)
    xy))

(defun dec32 (xy)
  (values (ldb (byte 16  0) xy)
          (ldb (byte 16 16) xy)))

(defmethod fb:swap-buffers ((window window) &key (x 0) (y 0) (w (fb:width window)) (h (fb:height window)) sync)
  (with-rect (rect x y w h)
    (win32:invalidate-rect (ptr window) rect T)
    (win32:stretch-di-bits (dc window) x (- h y) w (- h) x y w h
                           (static-vectors:static-vector-pointer (buffer window))
                           (bitmap-info window) :rgb-colors :src-copy)))

(defmethod fb-int:wait-for-events ((backend (eql :win32)) windows &key timeout)
  (let ((millis (etypecase timeout
                  (null 0)
                  ((eql T) 1000)
                  (real (truncate (* 1000 timeout)))))
        (count (loop for window in windows
                     sum (length (timers window))))
        (found ()))
    (cffi:with-foreign-objects ((msg '(:struct win32:message))
                                (handles :pointer count))
      (loop with i = 0
            for window in windows
            do (loop for timer in (timers window)
                     do (setf (cffi:mem-aref handles :pointer i) timer)
                        (incf i)))
      (loop (let ((idx (win32:msg-wait-for-multiple-objects count handles NIL millis #xFFFF)))
              (when (< idx count)
                (loop for window in windows
                      for left = 0 then right
                      for right = (length (timers window))
                      do (when (< (1- left) idx right)
                           (push window found)
                           (return))))
              (dolist (window windows)
                (when (win32:peek-message msg (ptr window) 0 0 :remove)
                  (push window found))))
            (when (or found (not (eql T timeout)))
              (return found))))))

(defmethod fb:process-events ((window window) &key timeout)
  (cffi:with-foreign-objects ((msg '(:struct win32:message)))
    (flet ((poll-events ()
             (loop while (win32:peek-message msg (ptr window) 0 0 :remove)
                   do (case (win32:message-type msg)
                        (:quit
                         (fb:shutdown))
                        (T
                         (win32:translate-message msg)
                         (win32:dispatch-message msg))))))
      (let ((millis (etypecase timeout
                      (null 0)
                      ((eql T) 1000)
                      (real (truncate (* 1000 timeout))))))
        (loop while (and (ptr window) (not (fb-int:close-requested-p window)))
              do (let ((count (length (timers window))))
                   (cffi:with-foreign-objects ((handles :pointer count))
                     (loop for timer in (timers window)
                           for i from 0
                           do (setf (cffi:mem-aref handles :pointer i) timer))
                     (let ((idx (win32:msg-wait-for-multiple-objects count handles NIL millis #xFFFF)))
                       (if (< idx count)
                           (fb:timer-triggered window (cffi:mem-aref handles :pointer idx))
                           (poll-events)))))
                 (unless (eql T timeout)
                   (return)))))))

(cffi:defcallback handle-event :ssize ((ptr :pointer) (message win32::message-type) (wparam :size) (lparam :size))
  (let ((window (fb-int:ptr-window ptr)))
    (block NIL
      (when window
        (case message
          (:nccreate
           (ignore-errors (win32:enable-non-client-dpi-scaling ptr)))
          (:paint
           (fb:window-refreshed window))
          (:close
           (fb:window-closed window)
           (return 0))
          (:syscommand
           (when (and (fb:fullscreen-p window)
                      (or (= #xF140 (logand wparam #xFFF0))
                          (= #xF170 (logand wparam #xFFF0))))
             (return 0)))
          (:inputlangchange
           (init-stringtable))
          ((:keydown :syskeydown :keyup :syskeyup)
           ;; TODO: handle key repeats
           (let ((scancode (logand (ldb (byte 16 16) lparam) #x1FF))
                 (action (if (logtest #x8000 (ldb (byte 16 16) lparam)) :release :press))
                 (modifiers (update-modifiers window)))
             (when (= #x000 scancode) (setf scancode (win32:map-virtual-key wparam :vk-to-vsc)))
             (when (= #x054 scancode) (setf scancode #x137))
             (when (= #x146 scancode) (setf scancode #x045))
             (when (= #x136 scancode) (setf scancode #x036))
             (cond ((= wparam (cffi:foreign-enum-value 'win32:key :CONTROL))
                    (cond ((logtest (ldb (byte 16 16) lparam) #x0100)
                           (fb:key-changed window :right-control scancode :press modifiers))
                          (T ;; Hack to handle AltGr sending LCTRL + RALT
                           (cffi:with-foreign-objects ((msg '(:struct win32:message)))
                             (let ((time (win32:get-message-time)))
                               (unless (and (win32:peek-message msg ptr 0 0 :noremove)
                                            (find (win32:message-type msg) '(:keydown :syskeydown :keyup :syskeyup))
                                            (= (win32:message-wparameter msg) (cffi:foreign-enum-value 'win32:key :MENU))
                                            (logtest (ldb (byte 16 16) (win32:message-lparameter msg)) #x0100)
                                            (= time (win32:message-time msg)))
                                 (fb:key-changed window :left-control scancode :press modifiers)))))))
                   ((= wparam (cffi:foreign-enum-value 'win32:key :PROCESSKEY)))
                   ((and (= wparam (cffi:foreign-enum-value 'win32:key :SHIFT)) (eql action :release))
                    (fb:key-changed window :left-shift scancode action modifiers)
                    (fb:key-changed window :right-shift scancode action modifiers))
                   ((= wparam (cffi:foreign-enum-value 'win32:key :SNAPSHOT))
                    (fb:key-changed window (translate-keycode scancode) scancode :press modifiers)
                    (fb:key-changed window (translate-keycode scancode) scancode :release modifiers))
                   (T
                    (fb:key-changed window (translate-keycode scancode) scancode action modifiers)))))
          ((:char :syschar)
           (cond ((<= #xD800 wparam #xDBFF)
                  (setf (surrogate window) wparam))
                 ((<= #xDC00 wparam #xDFFF)
                  (fb:string-entered window (string (code-char (+ (ash (- (surrogate window) #xD800) 10)
                                                                  (- wparam #xDC00)
                                                                  #x10000))))
                  (setf (surrogate window) NIL))
                 (T
                  (fb:string-entered window (string (code-char wparam)))
                  (setf (surrogate window) NIL)))
           (return 0))
          (:unichar
           (cond ((= wparam #xFFFF)
                  (return 1))
                 (T
                  (fb:string-entered window (string (code-char wparam)))
                  (return 0))))
          ((:lbuttonup :lbuttondown :lbuttondblclk)
           (let ((action (case message (:lbuttonup :press) (:lbuttondown :release) (:lbuttondblclk :double-click))))
             (fb:mouse-button-changed window :left action (update-modifiers window)))
           (return 0))
          ((:rbuttonup :rbuttondown :rbuttondblclk)
           (let ((action (case message (:rbuttonup :press) (:rbuttondown :release) (:rbuttondblclk :double-click))))
             (fb:mouse-button-changed window :right action (update-modifiers window)))
           (return 0))
          ((:mbuttonup :mbuttondown :mbuttondblclk)
           (let ((action (case message (:mbuttonup :press) (:mbuttondown :release) (:mbuttondblclk :double-click))))
             (fb:mouse-button-changed window :middle action (update-modifiers window)))
           (return 0))
          ((:xbuttonup :xbuttondown :xbuttondblclk)
           (let ((action (case message (:xbuttonup :press) (:xbuttondown :release) (:xbuttondblclk :double-click))))
             (fb:mouse-button-changed window (ldb (byte 16 16) wparam) action (update-modifiers window)))
           (return 0))
          (:mousewheel
           (fb:mouse-scrolled window 0 (/ (ldb (byte 16 16) wparam) 120))
           (return 0))
          (:mousehwheel
           (fb:mouse-scrolled window (/ (ldb (byte 16 16) wparam) -120) 0)
           (return 0))
          (:mousemove
           (unless (fb:mouse-entered-p window)
             (cffi:with-foreign-objects ((track '(:struct win32:track-mouse-event)))
               (setf (win32:track-mouse-event-size track) (cffi:foreign-type-size '(:struct win32:track-mouse-event)))
               (setf (win32:track-mouse-event-flags track) 2)
               (setf (win32:track-mouse-event-track track) (fb-int:ptr-int ptr))
               (setf (win32:track-mouse-event-hover-time track) 0)
               (win32:track-mouse-event track)))
           (multiple-value-bind (x y) (dec32 lparam)
             (fb:mouse-moved window x y))
           (return 0))
          (:mouseleave
           (fb:mouse-entered window NIL)
           (return 0))
          (:move
           (multiple-value-bind (x y) (dec32 lparam)
             (fb:window-moved window x y))
           (return 0))
          (:size
           (unless (fb:iconified-p window)
             (multiple-value-bind (w h) (dec32 lparam)
               (update-buffer window w h)
               (fb:window-resized window w h)
               (fb:window-refreshed window)))
           (let ((iconified (= wparam 1)))
             (unless (eq iconified (fb-int:iconified-p window))
               (fb:window-iconified window iconified)))
           (let ((maximized (= wparam 2)))
             (unless (eq maximized (fb-int:maximized-p window))
               (fb:window-maximized window maximized)))
           (return 0))
          (:getminmaxinfo
           (with-rect (rect 0 0 0 0)
             (win32:adjust-window-rect rect (get-window-style window) NIL)
             (let ((s (cffi:make-pointer lparam)))
               (setf (win32:minmax-info-min-track-size-x s) (+ (car (fb-int:minimum-size window)) (rect-width rect)))
               (setf (win32:minmax-info-min-track-size-y s) (+ (cdr (fb-int:minimum-size window)) (rect-height rect)))
               (when (car (fb-int:maximum-size window))
                 (setf (win32:minmax-info-max-track-size-x s) (+ (car (fb-int:maximum-size window)) (rect-width rect))))
               (when (cdr (fb-int:maximum-size window))
                 (setf (win32:minmax-info-max-track-size-y s) (+ (cdr (fb-int:maximum-size window)) (rect-height rect))))
               ;; TODO: This
               (when (fb:borderless-p window)
                 ))))
          ((:ncactivate :ncpaint)
           (when (fb:borderless-p window)
             (return 1)))
          (:setfocus
           (fb:window-focused window T)
           (return 0))
          (:killfocus
           (fb:window-focused window NIL)
           (return 0))
          (:dpichanged
           (multiple-value-bind (x y) (dec32 wparam)
             (fb:content-scale-changed window (/ x 96) (/ y 96))))
          (:setcursor
           (when (= 1 (ldb (byte 16 0) lparam))
             (setf (cursor-handle window) (cursor-handle window))
             (return 1)))
          (:dropfiles
           (let ((ptr (cffi:make-pointer wparam)))
             (cffi:with-foreign-objects ((point :long 2))
               (win32:drag-query-point ptr point)
               (fb:mouse-moved window (cffi:mem-aref point :long 0) (cffi:mem-aref point :long 1)))
             (fb:file-dropped window (drag-files ptr))
             (win32:drag-finish ptr)
             (return 0)))))
      (return (win32:def-window-proc (cffi:pointer-address ptr) message wparam lparam)))))

;; TODO: touch events
;; TODO: pen events
